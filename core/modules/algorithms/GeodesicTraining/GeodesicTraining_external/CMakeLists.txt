CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

SET( PROJECT_NAME GeodesicTraining )

# For Subversion

#INCLUDE(FindSubversion)
#IF(Subversion_FOUND) 
#    IF(EXISTS "${CMAKE_SOURCE_DIR}/../../.svn")
#        Subversion_WC_INFO("${CMAKE_SOURCE_DIR}/../../" MY)
#        SET(SVN_REVISION "${MY_WC_REVISION}")
#    ELSE ()
#        SET(SVN_REVISION "-1")
#    ENDIF()
#ELSE(Subversion_FOUND)
#    SET(SVN_REVISION "-1")
#ENDIF(Subversion_FOUND) 

# Set project name 
PROJECT( ${PROJECT_NAME} )
#SET( PROJECT_VERSION "1.6.0_${SVN_REVISION}")
SET( PROJECT_VERSION "0.5")
ADD_DEFINITIONS(-DPROJECT_VERSION="${PROJECT_VERSION}" )
 
# For ITK
FIND_PACKAGE( ITK REQUIRED )
SET(ITK_NO_IO_FACTORY_REGISTER_MANAGER "OFF")
INCLUDE( ${ITK_USE_FILE} )

# For OpenCV
FIND_PACKAGE( OpenCV REQUIRED )
#INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})

# macro to find all sub-directories
MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children
    RELATIVE ${curdir} ${curdir}/*
    PATTERN "svn" EXCLUDE
  )
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

FIND_PACKAGE(OpenMP REQUIRED)
SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED YES) 

# Probably unnecessary
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:strict")

FILE( GLOB_RECURSE sources "${PROJECT_SOURCE_DIR}/src/*.*" )

# Including the paths for headers
INCLUDE_DIRECTORIES(
	${PROJECT_SOURCE_DIR}/src/cbica_toolkit/
    ${PROJECT_SOURCE_DIR}/GeodesicTrainingSegmentation/include/GeodesicTrainingSegmentation
)

# Adding the subprojects
add_subdirectory(GeodesicTrainingSegmentation)

# Add sources to executable
ADD_EXECUTABLE( ${PROJECT_NAME} 
  ${sources}
)

# Link the libraries to be used
TARGET_LINK_LIBRARIES( ${PROJECT_NAME}
  ${ITK_LIBRARIES}
  ${OpenCV_LIBRARIES}
  GeodesicTrainingSegmentation
)

#--------------------------------------------------------------------------------
# Source file specification
#--------------------------------------------------------------------------------

INSTALL( TARGETS ${PROJECT_NAME} 
  #DESTINATION bin  
  BUNDLE DESTINATION .
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  CONFIGURATIONS "${CMAKE_CONFIGURATION_TYPES}"
  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
)

#INSTALL( FILES ${PROJECT_SOURCE_DIR}/data/1_params_default.csv DESTINATION data )

## this is for packaging only
SET( PROJECT_VENDOR "CBICA - UPenn" )
#SET( LICENSE_FILE "${PROJECT_SOURCE_DIR}/licenses/Combined.txt" )
SET( README_FILE  "${PROJECT_SOURCE_DIR}/README.txt" )
SET( PROJECT_DOMAIN "http://www.med.upenn.edu/sbia/software/" )
SET( PROJECT_CONTACT "software@cbica.upenn.edu" )
ADD_DEFINITIONS(-DPROJECT_NAME="${PROJECT_NAME}" )
ADD_DEFINITIONS(-DPROJECT_VERSION="${PROJECT_VERSION}" )
ADD_DEFINITIONS(-DEXE_NAME="${EXE_NAME}")
ADD_DEFINITIONS(-DCaPTk_Variant="${CaPTk_Variant}")
ADD_DEFINITIONS(-DPROJECT_NAME_EXTENDED="${PROJECT_NAME_EXTENDED}")
ADD_DEFINITIONS(-DCONTACT="${PROJECT_CONTACT}")
ADD_DEFINITIONS(-DPROJECT_CONTACT="${PROJECT_CONTACT}")
ADD_DEFINITIONS(-DPROJECT_DOMAIN="${PROJECT_DOMAIN}")
#ADD_DEFINITIONS(-DPROJECT_LICENSE="${LICENSE_FILE}")
#ADD_DEFINITIONS(-DLICENSE="${LICENSE_FILE}")
ADD_DEFINITIONS(-DPROJECT_README="${README_FILE}")
ADD_DEFINITIONS(-DREADME="${README_FILE}")
ADD_DEFINITIONS(-DPROJECT_SOURCE_DIR="${PROJECT_SOURCE_DIR}/")
ADD_DEFINITIONS(-DPROJECT_VARIANT="${${PROJECT_NAME}_Variant}")

# CPack settings
IF(WIN32)
  SET(CPACK_GENERATOR "NSIS")
  SET(CPACK_SOURCE_GENERATOR "ZIP")
  SET(CPACK_NSIS_DISPLAY_NAME "${PROJECT_NAME}") 
  SET(CPACK_NSIS_PACKAGE_NAME "${PROJECT_NAME}") 
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}_${${PROJECT_NAME}_Variant}\\\\${PROJECT_VERSION}")
  SET(CPACK_NSIS_INSTALL_ROOT "C:")
  SET(CPACK_NSIS_DEFINES "RequestExecutionLevel user")
  SET(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL "ON")
  #SET(CPACK_NSIS_MUI_ICON "${DATA_DIR}/icons/application/windows/captk.ico")
  SET(CPACK_NSIS_MUI_FINISHPAGE_RUN "${EXE_NAME}.exe")
  #SET(CPACK_NSIS_INSTALLED_ICON_NAME "${PROJECT_NAME}${CMAKE_EXECUTABLE_SUFFIX}")
  #SET(CPACK_NSIS_MUI_FINISHPAGE_RUN "${CPACK_NSIS_INSTALLED_ICON_NAME}")
  SET(CPACK_NSIS_HELP_LINK "https:\\\\\\\\www.med.upenn.edu\\\\sbia\\\\software\\\\")
  SET(CPACK_NSIS_CONTACT "${PROJECT_CONTACT}")
  SET(CPACK_NSIS_URL_INFO_ABOUT "https:\\\\\\\\www.med.upenn.edu\\\\sbia\\\\software\\\\")
  #SET(CPACK_NSIS_MODIFY_PATH "ON") # desktop shortcut doesn't work, for some reason
  # create extra shortcuts and respective uninstall targets 
  SET(CPACK_NSIS_CREATE_ICONS_EXTRA "CreateShortCut '\$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${EXE_NAME}.lnk' '\$INSTDIR\\\\bin\\\\${EXE_NAME}.exe'")
  #SET(CPACK_NSIS_CREATE_ICONS "CreateShortCut '$DESKTOP\\\\${EXE_NAME}.lnk' '$INSTDIR\\\\bin\\\\${EXE_NAME}.exe'")
  #SET(CPACK_NSIS_CREATE_ICONS_EXTRA "  CreateShortCut '$INSTDIR\\\\${EXE_NAME}.lnk' '$INSTDIR\\\\bin\\\\${EXE_NAME}.exe'")
  SET(CPACK_NSIS_CREATE_ICONS "CreateShortCut '\$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\README.lnk' '\$INSTDIR\\\\share\\\\doc\\\\index.html'")
  #SET(CPACK_NSIS_DELETE_ICONS_EXTRA "  Delete '$SMPROGRAMS\\\\$START_MENU\\\\${EXE_NAME}.lnk'")
  SET(CPACK_NSIS_DELETE_ICONS "Delete '$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${EXE_NAME}.lnk'")
  #SET(CPACK_NSIS_DELETE_ICONS "Delete '$DESKTOP\\\\${EXE_NAME}.lnk'")
  #SET(CPACK_NSIS_DELETE_ICONS_EXTRA "Delete '$INSTDIR\\\\${EXE_NAME}.lnk'")
  SET(CPACK_NSIS_DELETE_ICONS "Delete '$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\README.lnk'")
  SET(CPACK_NSIS_INSTALLED_ICON_NAME "${EXE_NAME}") 
  SET(CPACK_SYSTEM_NAME "Win64")
ELSEIF(APPLE)
  SET(CMAKE_INSTALL_PREFIX "/Applications")
  SET(CPACK_GENERATOR "DragNDrop")
  SET(CPACK_DMG_FORMAT "UDBZ")
  SET(CPACK_DMG_VOLUME_NAME "${EXE_NAME}")
  SET(CPACK_SYSTEM_NAME "OSX")
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}_${${PROJECT_NAME}_Variant}/${PROJECT_VERSION}")
  #SET(CPACK_PACKAGING_INSTALL_PREFIX "/usr")
  #SET(CPACK_DMG_DS_STORE "${ICONS_DIR}/DMGDSStore")
  #SET(CPACK_DMG_BACKGROUND_IMAGE "${ICONS_DIR}/DMGBackground.png")
ELSEIF(UNIX)
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}_${${PROJECT_NAME}_Variant}/${PROJECT_VERSION}")
  #SET(CPACK_PACKAGING_INSTALL_PREFIX "/usr")
  SET(CPACK_CMAKE_GENERATOR "Unix Makefiles")
  SET(CPACK_GENERATOR "STGZ")
  SET(CPACK_SOURCE_GENERATOR "TGZ")
  SET(CPACK_SYSTEM_NAME "${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
  SET(CPACK_SYSTEM_NAME "Linux-i686")
  SET(CPACK_TOPLEVEL_TAG "Linux-i686")
  SET(CPACK_STRIP_FILES "${EXE_NAME}")
ENDIF()
# common
SET(CPACK_SOURCE_STRIP_FILES TRUE )
SET(CPACK_PACKAGE_EXECUTABLES "${EXE_NAME}" "${EXE_NAME}")
SET(CPACK_CREATE_DESKTOP_LINKS "${EXE_NAME}" ) 
SET(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}_${PROJECT_VERSION}")
SET(CPACK_PACKAGE_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH "${PROJECT_VERSION_PATCH}")
SET(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
SET(CPACK_PACKAGE_VENDOR "${PROJECT_VENDOR}")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "CaPTk is a collection of algorithms from CBICA")
SET(CPACK_SOURCE_IGNORE_FILES "\\\\.svn/;^${PROJECT_SOURCE_DIR}/doc/")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "captk-${SW_VER}-source" CACHE INTERNAL "tarball basename")
#SET(CPACK_RESOURCE_FILE_README "${README_FILE}")
#SET(CPACK_RESOURCE_FILE_LICENSE "${LICENSE_FILE}") 
SET(CPACK_COMPONENT_LIBRARIES_INSTALL_TYPES Developer Full)
SET(CPACK_COMPONENT_HEADERS_INSTALL_TYPES Developer Full)
SET(CPACK_COMPONENT_APPLICATIONS_INSTALL_TYPES Full)
SET(CPACK_ALL_INSTALL_TYPES Full Developer)
set(CPACK_SOURCE_IGNORE_FILES "${CMAKE_SOURCE_DIR}/bin/;{CMAKE_SOURCE_DIR}/build/;${CMAKE_SOURCE_DIR}/.svn/")

INCLUDE(InstallRequiredSystemLibraries)
INCLUDE(CPack)
